name: MERN CI/CD Pipeline

on:
  push:
    branches:
      - cicd-creation  # Trigger when changes are pushed to the main branch
  pull_request:
    branches:
      - cicd-creation  # Trigger on pull requests to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Install docker-compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
        docker-compose version  # Verify installation
    
    # - name: Install docker-compose
    #   run: |
    #     sudo curl -L https://github.com/docker/compose/releases/download/v2.8.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
    #     sudo chmod +x /usr/local/bin/docker-compose
    
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
      with:
        version: latest

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Create environment files
      run: |
        echo "${{ secrets.BACKEND_ENV_VARS }}" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > backend/.env
        echo "${{ secrets.FRONTEND_ENV_VARS }}" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > aiworkspace/.env

    - name: Set up Node.js (Backend)
      uses: actions/setup-node@v2
      with:
        node-version: '20.2.0'  # Use the appropriate Node.js version for your project

    - name: Install Backend Dependencies
      run: |
        cd backend  # Assuming your backend is in a 'backend' directory
        npm install

    - name: Run Backend Tests
      run: |
        cd backend
        npm test

    - name: Set up React (Frontend)
      run: |
        cd aiworkspace  # Assuming your frontend is in a 'frontend' directory
        npm install

    - name: Run Frontend Tests
      run: |
        cd aiworkspace
        npm test

    - name: Build Docker Images
      run: |
        docker-compose build
  
    - name: Push frontend Docker image
      run: |
        docker tag krithikpatil/aiworkspace-frontend-repo:latest krithikpatil/aiworkspace-frontend-repo:v1
        docker push krithikpatil/aiworkspace-frontend-repo:v1
        
    - name: Push backend Docker image
      run: |
        docker tag krithikpatil/aiworkspace-backend-repo:latest krithikpatil/aiworkspace-backend-repo:v1
        docker push krithikpatil/aiworkspace-backend-repo:v1
    
    - name: Test Render API Access
      run: |
        curl -v https://api.onrender.com/v1/services \
          -H "Authorization: Bearer ${{ secrets.ONRENDER_API_KEY }}"
    
    - name: Deploy to OnRender (Backend)
      run: |
        curl --request POST \
            --url https://api.render.com/v1/services/${{secrets.BACKEND_SERVICE_ID }}/deploys \
            --header 'accept: application/json' \
            --header 'authorization: Bearer ${{ secrets.ONRENDER_API_KEY }}' \
            --header 'content-type: application/json' \
            --data '
        {
          "clearCache": "do_not_clear"
        }
        '
  
    - name: Deploy to OnRender (Frontend)
      run: |
        curl --request POST \
            --url https://api.render.com/v1/services/${{secrets.FRONTEND_SERVICE_ID }}/deploys \
            --header 'accept: application/json' \
            --header 'authorization: Bearer ${{ secrets.ONRENDER_API_KEY }}' \
            --header 'content-type: application/json' \
            --data '
        {
          "clearCache": "do_not_clear"
        }
        '
